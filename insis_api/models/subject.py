# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_model_ import Model


class Subject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ident: str = None, name: str = None, department: str = None, obligation: str = None,
                 exam_type: str = None, credits: int = None, lang: str = None, subject_group: str = None,
                 agenda: str = None):  # noqa: E501
        """Subject - a model defined in Swagger

        :param ident: The ident of this Subject.  # noqa: E501
        :type ident: str
        :param name: The name of this Subject.  # noqa: E501
        :type name: str
        :param department: The department of this Subject.  # noqa: E501
        :type department: str
        :param obligation: The obligation of this Subject.  # noqa: E501
        :type obligation: str
        :param exam_type: The exam_type of this Subject.  # noqa: E501
        :type exam_type: str
        :param credits: The credits of this Subject.  # noqa: E501
        :type credits: int
        :param lang: The lang of this Subject.  # noqa: E501
        :type lang: str
        :param subject_group: The subject_group of this Subject.  # noqa: E501
        :type subject_group: str
        :param agenda: The agenda of this Subject.  # noqa: E501
        :type agenda: str
        """
        self.swagger_types = {
            'ident': str,
            'name': str,
            'department': str,
            'obligation': str,
            'exam_type': str,
            'credits': int,
            'lang': str,
            'subject_group': str,
            'agenda': str
        }

        self.attribute_map = {
            'ident': 'ident',
            'name': 'name',
            'department': 'department',
            'obligation': 'obligation',
            'exam_type': 'exam_type',
            'credits': 'credits',
            'lang': 'lang',
            'subject_group': 'subject_group',
            'agenda': 'agenda'
        }

        self._ident = ident
        self._name = name
        self._department = department
        self._obligation = obligation
        self._exam_type = exam_type
        self._credits = credits
        self._lang = lang
        self._subject_group = subject_group
        self._agenda = agenda

    @classmethod
    def from_dict(cls, dikt) -> 'Subject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subject of this Subject.  # noqa: E501
        :rtype: Subject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ident(self) -> str:
        """Gets the ident of this Subject.


        :return: The ident of this Subject.
        :rtype: str
        """
        return self._ident

    @ident.setter
    def ident(self, ident: str):
        """Sets the ident of this Subject.


        :param ident: The ident of this Subject.
        :type ident: str
        """

        self._ident = ident

    @property
    def name(self) -> str:
        """Gets the name of this Subject.


        :return: The name of this Subject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Subject.


        :param name: The name of this Subject.
        :type name: str
        """

        self._name = name

    @property
    def department(self) -> str:
        """Gets the department of this Subject.


        :return: The department of this Subject.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department: str):
        """Sets the department of this Subject.


        :param department: The department of this Subject.
        :type department: str
        """

        self._department = department

    @property
    def obligation(self) -> str:
        """Gets the obligation of this Subject.


        :return: The obligation of this Subject.
        :rtype: str
        """
        return self._obligation

    @obligation.setter
    def obligation(self, obligation: str):
        """Sets the obligation of this Subject.


        :param obligation: The obligation of this Subject.
        :type obligation: str
        """

        self._obligation = obligation

    @property
    def exam_type(self) -> str:
        """Gets the exam_type of this Subject.


        :return: The exam_type of this Subject.
        :rtype: str
        """
        return self._exam_type

    @exam_type.setter
    def exam_type(self, exam_type: str):
        """Sets the exam_type of this Subject.


        :param exam_type: The exam_type of this Subject.
        :type exam_type: str
        """

        self._exam_type = exam_type

    @property
    def credits(self) -> int:
        """Gets the credits of this Subject.


        :return: The credits of this Subject.
        :rtype: int
        """
        return self._credits

    @credits.setter
    def credits(self, credits: int):
        """Sets the credits of this Subject.


        :param credits: The credits of this Subject.
        :type credits: int
        """

        self._credits = credits

    @property
    def lang(self) -> str:
        """Gets the lang of this Subject.


        :return: The lang of this Subject.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang: str):
        """Sets the lang of this Subject.


        :param lang: The lang of this Subject.
        :type lang: str
        """

        self._lang = lang

    @property
    def subject_group(self) -> str:
        """Gets the subject_group of this Subject.


        :return: The subject_group of this Subject.
        :rtype: str
        """
        return self._subject_group

    @subject_group.setter
    def subject_group(self, subject_group: str):
        """Sets the subject_group of this Subject.


        :param subject_group: The subject_group of this Subject.
        :type subject_group: str
        """

        self._subject_group = subject_group

    @property
    def agenda(self) -> str:
        """Gets the agenda of this Subject.


        :return: The agenda of this Subject.
        :rtype: str
        """
        return self._agenda

    @agenda.setter
    def agenda(self, agenda: str):
        """Sets the agenda of this Subject.


        :param agenda: The agenda of this Subject.
        :type agenda: str
        """

        self._agenda = agenda
